{"version":3,"sources":["components/block/block.tsx","components/face/face.tsx"," enums.tsx","stores/app-store.ts","components/counter/counter.tsx","components/difficulty/difficulty.tsx","components/board/board.tsx","hooks/use-key-press.tsx","stores/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["observer","state","opened","marked","minesCount","handleClick","onClick","className","count","hash","1","2","3","4","5","6","7","8","9","convertToWords","win","gameOver","DifficultyEnum","id","name","cols","rows","mines","clearBlock","persist","action","bound","noClosedFieldsLeft","difficulty","field","i","j","this","generateField","placeMines","placeNumbers","restartGame","isMarking","push","getClearCoords","randomRow","randomCol","x","AppStore","getRandomInt","y","countMines","forEach","console","log","toJS","time","gameStarted","clearInterval","startTimeout","setInterval","startTimer","openField","setGameOver","checkWin","currentField","k","l","haveEnoughMarkedAround","tryToOpen","openRest","openRecursive","max","Math","floor","random","observable","intermediate","Counter","digits","stringNumber","padStart","Difficulty","setDifficulty","onChange","e","target","value","Object","keys","map","_","key","isControlKeyPressed","targetKey","useState","keyPressed","setKeyPressed","downHandler","upHandler","useEffect","window","addEventListener","removeEventListener","useKeyPress","React","useContext","MobXProviderContext","checkClosedBlock","setMarkingState","row","block","App","create","hydrate","then","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8a44969.chunk.js","sourcesContent":["import React from 'react';\nimport {observer} from 'mobx-react';\nimport './block.scss';\nimport {IBlockState} from \"../../types/IBlock\";\n\ntype BlockProps = {\n  opened: boolean;\n  marked: boolean;\n  minesCount: number;\n  state: IBlockState;\n  handleClick?: () => {};\n}\n\nconst Block: React.FunctionComponent<BlockProps> = ({\n                                                      state,\n                                                      opened,\n                                                      marked,\n                                                      minesCount,\n                                                      handleClick\n                                                    }) => {\n\n\n  return (\n    <div\n      onClick={handleClick}\n      className={`block${marked ? ' marked' : ''} ${opened ? `opened ${state} ${convertToWords(minesCount)}` : 'closed'}`}>\n      {opened && minesCount > 0 && minesCount}\n    </div>\n  );\n\n  function convertToWords(count: number): string {\n    const hash: { [id: number]: string } = {\n      1: 'one',\n      2: 'two',\n      3: 'three',\n      4: 'four',\n      5: 'five',\n      6: 'six',\n      7: 'seven',\n      8: 'eight',\n      9: 'nine',\n    };\n\n    return hash?.[count] ?? 'zero';\n  }\n};\n\nexport default observer(Block);\n","import React, {FunctionComponent} from 'react';\nimport { observer } from 'mobx-react';\nimport './face.scss';\n\ntype FaceProps = {\n  win: boolean;\n  gameOver: boolean;\n  handleClick?: () => {};\n}\n\nconst Face: FunctionComponent<FaceProps> = ({ win, gameOver, handleClick }) => {\n  return (<div onClick={handleClick} className={`face${win ? ' face--win': ''}${gameOver ? ' face--game-over' : ''}`} />)\n};\n\nexport default observer(Face);\n","export type DifficultyLevel = {\n  id: string;\n  name: string;\n  cols: number;\n  rows: number;\n  mines: number;\n};\n\n\nexport type DifficultyName  = 'beginner' | 'intermediate' | 'professional';\n\nexport const DifficultyEnum: {[id: string]: DifficultyLevel} = {\n  'beginner': {\n    id: 'beginner',\n    name: 'Новичок',\n    cols: 9,\n    rows: 9,\n    mines: 10\n  },\n  'intermediate': {\n    id: 'intermediate',\n    name: 'Любитель',\n    cols: 16,\n    rows: 16,\n    mines: 40\n  },\n  'professional': {\n    id: 'professional',\n    name: 'Профессионал',\n    cols: 30,\n    rows: 16,\n    mines: 99\n  }\n};\n","import {action, observable, toJS} from 'mobx';\nimport {IBlock} from \"../types/IBlock\";\nimport {DifficultyEnum, DifficultyLevel} from '../ enums';\nimport {persist} from 'mobx-persist';\n\nconst clearBlock: IBlock = {opened: false, state: 'empty', marked: false};\n\nclass AppStore {\n  @persist('object') @observable difficulty: DifficultyLevel = DifficultyEnum.intermediate;\n  @persist('list') @observable field: any[] = [];\n  @persist @observable gameOver: boolean = false;\n  @persist @observable isMarking: boolean = false;\n  @persist @observable win: boolean = false;\n  @persist @observable gameStarted: boolean = false;\n  @persist @observable minesCount: number = 0;\n  @persist @observable time: number = 0;\n  @persist @observable startTimeout: any;\n\n  @action.bound\n  setDifficulty(difficulty: string = 'beginner') {\n    this.difficulty = DifficultyEnum[difficulty];\n    this.restartGame();\n  }\n\n  @action.bound\n  setMarkingState(state: boolean) {\n    this.isMarking = state;\n  }\n\n  @action.bound\n  generateField() {\n    const {difficulty: {cols, rows}, field} = this;\n    for (let i = 0; i < rows; i++) {\n      field.push([]);\n      for (let j = 0; j < cols; j++) {\n        field[i].push(clearBlock);\n      }\n    }\n  }\n\n  @action.bound\n  placeMines() {\n    const {difficulty: {mines, rows, cols}, field} = this;\n    for (let i = 0; i < mines; i++) {\n      const [randomRow, randomCol] = getClearCoords();\n\n      this.field[randomRow][randomCol].state = 'mine';\n    }\n\n    function getClearCoords(): [number, number] {\n      let x = AppStore.getRandomInt(rows);\n      let y = AppStore.getRandomInt(cols);\n      while (field[x][y].state != 'empty') {\n        x = AppStore.getRandomInt(rows);\n        y = AppStore.getRandomInt(cols);\n      }\n      return [x, y]\n    }\n  }\n\n  @action.bound\n  placeNumbers() {\n    const {difficulty: {cols, rows}, field} = this;\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (field[i][j].state === 'mine') continue;\n        field[i][j].minesCount = countMines(i, j);\n        if (field[i][j].minesCount > 0) {\n          field[i][j].state = 'closeToMine';\n        }\n      }\n    }\n\n    function countMines(i: number, j: number): number {\n      let count = 0;\n      const coords = [\n        [i - 1, j - 1],\n        [i, j - 1],\n        [i + 1, j - 1],\n        [i - 1, j],\n        [i, j],\n        [i + 1, j],\n        [i - 1, j + 1],\n        [i, j + 1],\n        [i + 1, j + 1],\n      ];\n\n      coords.forEach(([i, j]) => {\n        if (field?.[i]?.[j]) {\n          if (field[i][j].state === 'mine') {\n            count++;\n          }\n        }\n      });\n\n      return count;\n    }\n  }\n\n  @action.bound\n  openField() {\n    const {difficulty: {cols, rows}, field} = this;\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        field[i][j].opened = true;\n      }\n    }\n    console.log(toJS(field));\n  }\n\n  @action.bound\n  restartGame() {\n    this.gameOver = false;\n    this.win = false;\n    this.time = 0;\n    this.minesCount = this.difficulty.mines;\n    this.field = [];\n    this.gameStarted = false;\n    clearInterval(this.startTimeout);\n    this.generateField();\n    this.placeMines();\n    this.placeNumbers();\n  }\n\n  @action.bound\n  startTimer() {\n    this.startTimeout = setInterval(() => {\n      this.time += 1000;\n    }, 1000);\n  }\n\n  @action.bound\n  checkClosedBlock(i: number, j: number) {\n    // После победы нет смысла отмечать ячейки\n    if (this.win) {\n      return\n    }\n\n    if (!this.gameStarted) {\n      this.gameStarted = true;\n      this.startTimer();\n    }\n\n    const {field, isMarking, openField, setGameOver, checkWin} = this;\n    const currentField = field[i][j];\n\n    // Если не в режиме маркировки\n    if (!isMarking) {\n      // Если промаркировано миной или открыто, то не даём нажать\n      if (\n        currentField.opened\n        || (currentField.marked && !isMarking)) {\n        return;\n      }\n\n      tryToOpen(i, j);\n    } else {\n      // В режиме маркировки можно открыть\n      // все оставшиеся по цифре и количеству соседних мин\n      if (\n        currentField.opened\n        && currentField.state === 'closeToMine'\n        && haveEnoughMarkedAround(i, j)\n      ) {\n        openRest(i, j);\n\n        return;\n      }\n\n      // Нельзя маркировать пустые ячейки\n      if (currentField.opened) return;\n\n      // В режиме маркировки переставляем флажок (вкл/выкл)\n      currentField.marked = !currentField.marked;\n\n      if (currentField.marked) {\n        this.minesCount--;\n      } else {\n        this.minesCount++;\n      }\n\n      checkWin();\n    }\n\n    /**\n     * Попытка открыть ячейку\n     * @param i\n     * @param j\n     */\n    function tryToOpen(i: number, j: number) {\n      const currentField = field[i][j];\n\n      // Нажатие на мину - конец игры\n      if (currentField.state === 'mine') {\n        openField();\n        setGameOver(true);\n        currentField.state = 'destroyed';\n        return;\n      }\n\n      openRecursive(i, j);\n      checkWin();\n    }\n\n    /**\n     * В окрестностях есть достаточное количество отмеченных флажком мин\n     * @param i\n     * @param j\n     */\n    function haveEnoughMarkedAround(i: number, j: number): boolean {\n      let count = 0;\n      [\n        [i - 1, j - 1],\n        [i, j - 1],\n        [i + 1, j - 1],\n        [i - 1, j],\n        [i, j],\n        [i + 1, j],\n        [i - 1, j + 1],\n        [i, j + 1],\n        [i + 1, j + 1],\n      ].forEach(([k, l]) => {\n        const currentField = field?.[k]?.[l];\n        if (currentField && currentField.marked) {\n          count++;\n        }\n      });\n\n      return field[i][j].minesCount === count;\n    }\n\n    /**\n     * Открыть остальные ячейки вокруг данной\n     * @param i\n     * @param j\n     */\n    function openRest(i: number, j: number) {\n      [\n        [i - 1, j - 1],\n        [i, j - 1],\n        [i + 1, j - 1],\n        [i - 1, j],\n        [i, j],\n        [i + 1, j],\n        [i - 1, j + 1],\n        [i, j + 1],\n        [i + 1, j + 1],\n      ].forEach(([k, l]) => {\n        const currentField = field?.[k]?.[l];\n        if (currentField\n          && !currentField.marked\n          && !currentField.opened\n        ) {\n          tryToOpen(k, l);\n        }\n      });\n    }\n\n    /**\n     * Рекурсивно открыть ячейку и все смежные, кроме мин\n     * @param i\n     * @param j\n     */\n    function openRecursive(i: number, j: number) {\n      if (!field?.[i]?.[j]\n        || field[i][j].marked\n        || field[i][j].opened\n        || field[i][j].state === 'mine') {\n        return;\n      }\n\n      field[i][j].opened = true;\n\n      const nearCoords = [\n        [i - 1, j - 1],\n        [i, j - 1],\n        [i + 1, j - 1],\n        [i - 1, j],\n        [i, j],\n        [i + 1, j],\n        [i - 1, j + 1],\n        [i, j + 1],\n        [i + 1, j + 1],\n      ];\n\n      nearCoords.forEach(([k, l]) => {\n        if (i == k && j == l) {\n          return;\n        }\n        if (field?.[i]?.[j].state === 'empty') {\n          openRecursive(k, l);\n        }\n      });\n    }\n  }\n\n  @action.bound\n  setGameOver(state: boolean) {\n    this.gameOver = state;\n    if (state) {\n      clearInterval(this.startTimeout);\n    }\n  }\n\n  private static getRandomInt(max: number): number {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  @action.bound\n  checkWin() {\n    if (\n      this.minesCount === 0\n      && this.noClosedFieldsLeft()\n      && !this.gameOver\n    ) {\n      this.win = true;\n      clearInterval(this.startTimeout);\n\n      return;\n    }\n\n    this.win = false;\n  }\n\n  noClosedFieldsLeft = () => {\n    const {difficulty: {cols, rows}, field} = this;\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (!field[i][j].opened\n          && !field[i][j].marked) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  constructor() {\n    this.generateField();\n    this.placeMines();\n    this.placeNumbers();\n  }\n}\n\nexport default new AppStore();\n","import React from 'react';\nimport './counter.scss';\n\ntype CounterProps = {\n  count: number;\n  digits?: number;\n}\n\nconst Counter: React.FunctionComponent<CounterProps> = ({ digits= 3, count }) => {\n  const stringNumber = '' + count;\n  return (<div className='counter'>{stringNumber.padStart(digits, '0')}</div>);\n};\n\nexport default Counter;\n","import React, {ChangeEvent} from 'react';\nimport {DifficultyEnum, DifficultyLevel} from '../../ enums';\nimport './difficulty.scss';\n\ntype DifficultyProps = {\n  difficulty: DifficultyLevel;\n  setDifficulty?: (difficulty: string) => {};\n}\n\nconst Difficulty: React.FunctionComponent<DifficultyProps> = ({\n                                                                difficulty,\n                                                                setDifficulty\n                                                              }) => {\n\n  function handleChangeDifficulty(e: ChangeEvent<HTMLSelectElement>) {\n    setDifficulty?.(e.target.value);\n  }\n\n  return (<div className='frame difficulty'>\n    Сложность:\n    <select name='difficulty'\n            className='difficulty__select'\n      onChange={handleChangeDifficulty}\n      value={difficulty.id}>\n      {Object.keys(DifficultyEnum).map(_ => {\n        return (\n          <option\n            className='difficulty__item'\n            key={DifficultyEnum[_].id}\n            value={DifficultyEnum[_].id}>\n            {DifficultyEnum[_].name}\n          </option>\n        );\n      })}\n    </select>\n  </div>);\n};\n\nexport default Difficulty;\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport Block from '../block/block';\nimport Face from '../face/face';\nimport './board.scss';\nimport {useStores} from '../../stores';\nimport {IBlock} from '../../types/IBlock';\nimport useKeyPress from '../../hooks/use-key-press';\nimport Counter from '../counter/counter';\nimport Difficulty from '../difficulty/difficulty';\n\nconst Board = () => {\n  const isControlKeyPressed = useKeyPress('Shift');\n  const {AppStore} = useStores();\n  const {\n    minesCount,\n    time,\n    field,\n    win,\n    gameOver,\n    difficulty,\n    checkClosedBlock,\n    restartGame,\n    setMarkingState,\n    setDifficulty\n  } = AppStore;\n\n  setMarkingState(isControlKeyPressed);\n\n  return (\n    <div className='board'>\n      <div className='field'>\n        <div className='board__header-row'>\n          <Counter count={minesCount} />\n          <Face\n            win={win}\n            gameOver={gameOver}\n            handleClick={restartGame}\n          />\n          <Counter count={time / 1000} />\n        </div>\n        <div className='frame'>\n          {\n            field.map((row: [], i: number) =>\n              <div className='row' key={i}>\n                {\n                  row.map((block: IBlock, j: number) => {\n                    const {state, opened, marked, minesCount = 0} = block;\n                    return (<Block\n                      handleClick={() => checkClosedBlock(i, j)}\n                      state={state}\n                      opened={opened}\n                      marked={marked}\n                      minesCount={minesCount}\n                      key={j}\n                    />)\n                  })\n                }\n              </div>\n            )\n          }\n        </div>\n        <Difficulty\n          difficulty={difficulty}\n          setDifficulty={setDifficulty}\n        />\n      </div>\n    </div>\n  )\n};\n\nexport default observer(Board);\n","import React, { useState, useEffect } from 'react';\n\n// Hook\nexport default function useKeyPress(targetKey: string) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }: { key: string }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }: { key: string }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n","import React from 'react';\nimport AppStore from './app-store';\nimport { MobXProviderContext } from 'mobx-react';\n\nexport const stores = {\n  AppStore,\n};\n\nexport function useStores() {\n  return React.useContext(MobXProviderContext)\n}\n","import React from 'react';\nimport './App.css';\nimport Board from './components/board/board';\nimport {Provider} from 'mobx-react';\nimport AppStore from './stores/app-store';\nimport {create} from 'mobx-persist';\n\nconst App = () => {\n  const hydrate = create();\n  hydrate('app-store', AppStore).then(() => {\n    // Запускаем таймер после гидрации\n    if(AppStore.gameStarted) {\n      AppStore.startTimer();\n    }\n  });\n\n  return (\n    <Provider AppStore={AppStore}>\n      <div className='App'>\n       <Board />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}