{"version":3,"sources":["components/block/block.tsx","components/face/face.tsx","lang.ts"," enums.tsx","stores/app-store.ts","components/counter/counter.tsx","components/info/info.tsx","components/difficulty/difficulty.tsx","components/board/board.tsx","hooks/use-key-press.tsx","stores/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["observer","state","opened","marked","minesCount","handleLeftClick","handleRightClick","onClick","onContextMenu","e","preventDefault","className","count","hash","1","2","3","4","5","6","7","8","9","convertToWords","win","gameOver","handleClick","LANG","DifficultyEnum","id","name","cols","rows","mines","clearBlock","persist","action","bound","noClosedFieldsLeft","difficulty","field","i","j","this","generateField","placeMines","placeNumbers","restartGame","shiftMode","push","getClearCoords","randomRow","randomCol","x","AppStore","getRandomInt","y","countMines","forEach","time","gameStarted","clearInterval","startTimeout","setInterval","startTimer","openField","setGameOver","checkWin","currentField","k","l","haveEnoughMarkedAround","tryToOpen","openRest","openRecursive","max","Math","floor","random","observable","intermediate","Counter","digits","stringNumber","padStart","Info","Difficulty","setDifficulty","onChange","target","value","Object","keys","map","_","key","isControlKeyPressed","targetKey","useState","keyPressed","setKeyPressed","downHandler","upHandler","useEffect","window","addEventListener","removeEventListener","useKeyPress","React","useContext","MobXProviderContext","checkClosedBlock","markBlock","setShiftState","row","block","App","create","hydrate","then","document","onselectstart","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a0152f5.chunk.js","sourcesContent":["import React from 'react';\nimport {observer} from 'mobx-react';\nimport './block.scss';\nimport {IBlockState} from \"../../types/IBlock\";\n\ntype BlockProps = {\n  opened: boolean;\n  marked: boolean;\n  minesCount: number;\n  state: IBlockState;\n  handleLeftClick?: () => {};\n  handleRightClick?: () => {};\n}\n\nconst Block: React.FunctionComponent<BlockProps> = ({\n                                                      state,\n                                                      opened,\n                                                      marked,\n                                                      minesCount,\n                                                      handleLeftClick,\n                                                      handleRightClick\n                                                    }) => {\n\n\n  return (\n    <div\n      onClick={handleLeftClick}\n      onContextMenu={(e) => {\n        e.preventDefault();\n        handleRightClick?.();\n      }}\n      className={`block${marked ? ' marked' : ''} ${opened ? `opened ${state} ${convertToWords(minesCount)}` : 'closed'}`}>\n      {opened && minesCount > 0 && minesCount}\n    </div>\n  );\n\n  function convertToWords(count: number): string {\n    const hash: { [id: number]: string } = {\n      1: 'one',\n      2: 'two',\n      3: 'three',\n      4: 'four',\n      5: 'five',\n      6: 'six',\n      7: 'seven',\n      8: 'eight',\n      9: 'nine',\n    };\n\n    return hash?.[count] ?? 'zero';\n  }\n};\n\nexport default observer(Block);\n","import React, {FunctionComponent} from 'react';\nimport { observer } from 'mobx-react';\nimport './face.scss';\n\ntype FaceProps = {\n  win: boolean;\n  gameOver: boolean;\n  handleClick?: () => {};\n}\n\nconst Face: FunctionComponent<FaceProps> = ({ win, gameOver, handleClick }) => {\n  return (<div onClick={handleClick} className={`face${win ? ' face--win': ''}${gameOver ? ' face--game-over' : ''}`} />)\n};\n\nexport default observer(Face);\n","export const LANG = {\n    OPEN_NUMBER: 'Open number',\n    MARK_CELL: 'Mark cell',\n    DIFFICULTY: 'Difficulty',\n    BEGINNER: 'Beginner',\n    INTERMEDIATE: 'Intermediate',\n    EXPERT: 'Expert'\n}","import {LANG} from \"./lang\";\n\nexport type DifficultyLevel = {\n  id: string;\n  name: string;\n  cols: number;\n  rows: number;\n  mines: number;\n};\n\nexport const DifficultyEnum: {[id: string]: DifficultyLevel} = {\n  'beginner': {\n    id: 'beginner',\n    name: LANG.BEGINNER,\n    cols: 9,\n    rows: 9,\n    mines: 10\n  },\n  'intermediate': {\n    id: 'intermediate',\n    name: LANG.INTERMEDIATE,\n    cols: 16,\n    rows: 16,\n    mines: 40\n  },\n  'expert': {\n    id: 'expert',\n    name: LANG.EXPERT,\n    cols: 30,\n    rows: 16,\n    mines: 99\n  }\n};\n","import {action, observable} from 'mobx';\nimport {IBlock} from \"../types/IBlock\";\nimport {DifficultyEnum, DifficultyLevel} from '../ enums';\nimport {persist} from 'mobx-persist';\n\nconst clearBlock: IBlock = {opened: false, state: 'empty', marked: false};\n\nclass AppStore {\n  @persist('object') @observable difficulty: DifficultyLevel = DifficultyEnum.intermediate;\n  @persist('list') @observable field: any[] = [];\n  @persist @observable gameOver: boolean = false;\n  @persist @observable shiftMode: boolean = false;\n  @persist @observable win: boolean = false;\n  @persist @observable gameStarted: boolean = false;\n  @persist @observable minesCount: number = 0;\n  @persist @observable time: number = 0;\n  @persist @observable startTimeout: any;\n\n  @action.bound\n  setDifficulty(difficulty: string = 'beginner') {\n    this.difficulty = DifficultyEnum[difficulty];\n    this.restartGame();\n  }\n\n  @action.bound\n  setShiftState(state: boolean) {\n    this.shiftMode = state;\n  }\n\n  @action.bound\n  generateField() {\n    const {difficulty: {cols, rows}, field} = this;\n    for (let i = 0; i < rows; i++) {\n      field.push([]);\n      for (let j = 0; j < cols; j++) {\n        field[i].push(clearBlock);\n      }\n    }\n  }\n\n  @action.bound\n  placeMines() {\n    const {difficulty: {mines, rows, cols}, field} = this;\n    for (let i = 0; i < mines; i++) {\n      const [randomRow, randomCol] = getClearCoords();\n\n      this.field[randomRow][randomCol].state = 'mine';\n    }\n\n    function getClearCoords(): [number, number] {\n      let x = AppStore.getRandomInt(rows);\n      let y = AppStore.getRandomInt(cols);\n      while (field[x][y].state != 'empty') {\n        x = AppStore.getRandomInt(rows);\n        y = AppStore.getRandomInt(cols);\n      }\n      return [x, y]\n    }\n  }\n\n  @action.bound\n  placeNumbers() {\n    const {difficulty: {cols, rows}, field} = this;\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (field[i][j].state === 'mine') continue;\n        field[i][j].minesCount = countMines(i, j);\n        if (field[i][j].minesCount > 0) {\n          field[i][j].state = 'closeToMine';\n        }\n      }\n    }\n\n    function countMines(i: number, j: number): number {\n      let count = 0;\n      const coords = [\n        [i - 1, j - 1],\n        [i, j - 1],\n        [i + 1, j - 1],\n        [i - 1, j],\n        [i, j],\n        [i + 1, j],\n        [i - 1, j + 1],\n        [i, j + 1],\n        [i + 1, j + 1],\n      ];\n\n      coords.forEach(([i, j]) => {\n        if (field?.[i]?.[j]) {\n          if (field[i][j].state === 'mine') {\n            count++;\n          }\n        }\n      });\n\n      return count;\n    }\n  }\n\n  @action.bound\n  openField() {\n    const {difficulty: {cols, rows}, field} = this;\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        field[i][j].opened = true;\n      }\n    }\n  }\n\n  @action.bound\n  restartGame() {\n    this.gameOver = false;\n    this.win = false;\n    this.time = 0;\n    this.minesCount = this.difficulty.mines;\n    this.field = [];\n    this.gameStarted = false;\n    clearInterval(this.startTimeout);\n    this.generateField();\n    this.placeMines();\n    this.placeNumbers();\n  }\n\n  @action.bound\n  startTimer() {\n    this.startTimeout = setInterval(() => {\n      this.time += 1000;\n    }, 1000);\n  }\n\n  @action.bound\n  checkClosedBlock(i: number, j: number) {\n    // После победы нет смысла отмечать ячейки\n    if (this.win) {\n      return\n    }\n\n    if (!this.gameStarted) {\n      this.gameStarted = true;\n      this.startTimer();\n    }\n\n    const {field, shiftMode, openField, setGameOver, checkWin} = this;\n    const currentField = field[i][j];\n\n    // Если не в режиме маркировки\n    if (!shiftMode) {\n      // Если промаркировано миной или открыто, то не даём нажать\n      if (\n        currentField.opened\n        || (currentField.marked && !shiftMode)) {\n        return;\n      }\n\n      tryToOpen(i, j);\n    } else {\n      // В режиме маркировки можно открыть\n      // все оставшиеся по цифре и количеству соседних мин\n      if (\n        currentField.opened\n        && currentField.state === 'closeToMine'\n        && haveEnoughMarkedAround(i, j)\n      ) {\n        openRest(i, j);\n\n        return;\n      }\n\n      // Нельзя маркировать пустые ячейки\n      if (currentField.opened) return;\n\n      checkWin();\n    }\n\n    /**\n     * Попытка открыть ячейку\n     * @param i\n     * @param j\n     */\n    function tryToOpen(i: number, j: number) {\n      const currentField = field[i][j];\n\n      // Нажатие на мину - конец игры\n      if (currentField.state === 'mine') {\n        openField();\n        setGameOver(true);\n        currentField.state = 'destroyed';\n        return;\n      }\n\n      openRecursive(i, j);\n      checkWin();\n    }\n\n    /**\n     * В окрестностях есть достаточное количество отмеченных флажком мин\n     * @param i\n     * @param j\n     */\n    function haveEnoughMarkedAround(i: number, j: number): boolean {\n      let count = 0;\n      [\n        [i - 1, j - 1],\n        [i, j - 1],\n        [i + 1, j - 1],\n        [i - 1, j],\n        [i, j],\n        [i + 1, j],\n        [i - 1, j + 1],\n        [i, j + 1],\n        [i + 1, j + 1],\n      ].forEach(([k, l]) => {\n        const currentField = field?.[k]?.[l];\n        if (currentField && currentField.marked) {\n          count++;\n        }\n      });\n\n      return field[i][j].minesCount === count;\n    }\n\n    /**\n     * Открыть остальные ячейки вокруг данной\n     * @param i\n     * @param j\n     */\n    function openRest(i: number, j: number) {\n      [\n        [i - 1, j - 1],\n        [i, j - 1],\n        [i + 1, j - 1],\n        [i - 1, j],\n        [i, j],\n        [i + 1, j],\n        [i - 1, j + 1],\n        [i, j + 1],\n        [i + 1, j + 1],\n      ].forEach(([k, l]) => {\n        const currentField = field?.[k]?.[l];\n        if (currentField\n          && !currentField.marked\n          && !currentField.opened\n        ) {\n          tryToOpen(k, l);\n        }\n      });\n    }\n\n    /**\n     * Рекурсивно открыть ячейку и все смежные, кроме мин\n     * @param i\n     * @param j\n     */\n    function openRecursive(i: number, j: number) {\n      if (!field?.[i]?.[j]\n        || field[i][j].marked\n        || field[i][j].opened\n        || field[i][j].state === 'mine') {\n        return;\n      }\n\n      field[i][j].opened = true;\n\n      const nearCoords = [\n        [i - 1, j - 1],\n        [i, j - 1],\n        [i + 1, j - 1],\n        [i - 1, j],\n        [i, j],\n        [i + 1, j],\n        [i - 1, j + 1],\n        [i, j + 1],\n        [i + 1, j + 1],\n      ];\n\n      nearCoords.forEach(([k, l]) => {\n        if (i == k && j == l) {\n          return;\n        }\n        if (field?.[i]?.[j].state === 'empty') {\n          openRecursive(k, l);\n        }\n      });\n    }\n  }\n\n  @action.bound\n  markBlock(i: number, j: number) {\n    const { field } = this;\n    const currentField = field[i][j];\n\n    if(currentField.opened) {\n      return;\n    }\n\n    currentField.marked = !currentField.marked;\n\n    if (currentField.marked) {\n      this.minesCount--;\n    } else {\n      this.minesCount++;\n    }\n  }\n\n  @action.bound\n  setGameOver(state: boolean) {\n    this.gameOver = state;\n    if (state) {\n      clearInterval(this.startTimeout);\n    }\n  }\n\n  private static getRandomInt(max: number): number {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  @action.bound\n  checkWin() {\n    if (\n      this.minesCount === 0\n      && this.noClosedFieldsLeft()\n      && !this.gameOver\n    ) {\n      this.win = true;\n      clearInterval(this.startTimeout);\n\n      return;\n    }\n\n    this.win = false;\n  }\n\n  noClosedFieldsLeft = () => {\n    const {difficulty: {cols, rows}, field} = this;\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (!field[i][j].opened\n          && !field[i][j].marked) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  constructor() {\n    this.generateField();\n    this.placeMines();\n    this.placeNumbers();\n  }\n}\n\nexport default new AppStore();\n","import React from 'react';\nimport './counter.scss';\n\ntype CounterProps = {\n  count: number;\n  digits?: number;\n}\n\nconst Counter: React.FunctionComponent<CounterProps> = ({ digits= 3, count }) => {\n  const stringNumber = '' + count;\n  return (<div className='counter'>{stringNumber.padStart(digits, '0')}</div>);\n};\n\nexport default Counter;\n","import React from 'react';\nimport './info.scss';\nimport {LANG} from \"../../lang\";\n\nconst Info = () => <div className='info'>\n  <div className='info__row'>\n    <span className='info__pkm' /><span className='info__desc'>— {LANG.MARK_CELL}</span>\n  </div>\n  <div className='info__row'>\n    <strong>Shift + </strong><span className='info__lkm' /><span className='info__desc'> — {LANG.OPEN_NUMBER}</span>\n  </div>\n</div>;\n\nexport default Info;\n","import React, {ChangeEvent} from 'react';\nimport {DifficultyEnum, DifficultyLevel} from '../../ enums';\nimport './difficulty.scss';\nimport Info from '../info/info';\nimport {LANG} from \"../../lang\";\n\ntype DifficultyProps = {\n  difficulty: DifficultyLevel;\n  setDifficulty?: (difficulty: string) => {};\n}\n\nconst Difficulty: React.FunctionComponent<DifficultyProps> = ({\n                                                                difficulty,\n                                                                setDifficulty\n                                                              }) => {\n\n  function handleChangeDifficulty(e: ChangeEvent<HTMLSelectElement>) {\n    setDifficulty?.(e.target.value);\n  }\n\n  return (<div className='frame difficulty'>\n    <div>\n      {LANG.DIFFICULTY}:\n      <select name='difficulty'\n              className='difficulty__select'\n              onChange={handleChangeDifficulty}\n              value={difficulty.id}>\n        {Object.keys(DifficultyEnum).map(_ => {\n          return (\n            <option\n              className='difficulty__item'\n              key={DifficultyEnum[_].id}\n              value={DifficultyEnum[_].id}>\n              {DifficultyEnum[_].name}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n    <Info/>\n  </div>);\n};\n\nexport default Difficulty;\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport Block from '../block/block';\nimport Face from '../face/face';\nimport './board.scss';\nimport {useStores} from '../../stores';\nimport {IBlock} from '../../types/IBlock';\nimport useKeyPress from '../../hooks/use-key-press';\nimport Counter from '../counter/counter';\nimport Difficulty from '../difficulty/difficulty';\n\nconst Board = () => {\n  const isControlKeyPressed = useKeyPress('Shift');\n  const {AppStore} = useStores();\n  const {\n    minesCount,\n    time,\n    field,\n    win,\n    gameOver,\n    difficulty,\n    checkClosedBlock,\n    markBlock,\n    restartGame,\n    setShiftState,\n    setDifficulty\n  } = AppStore;\n\n  setShiftState(isControlKeyPressed);\n\n  return (\n    <div className='board'>\n      <div className='field'>\n        <div className='board__header-row'>\n          <Counter count={minesCount} />\n          <Face\n            win={win}\n            gameOver={gameOver}\n            handleClick={restartGame}\n          />\n          <Counter count={time / 1000} />\n        </div>\n        <div className='frame'>\n          {\n            field.map((row: [], i: number) =>\n              <div className='row' key={i}>\n                {\n                  row.map((block: IBlock, j: number) => {\n                    const {state, opened, marked, minesCount = 0} = block;\n                    return (<Block\n                      handleLeftClick={() => checkClosedBlock(i, j)}\n                      handleRightClick={() => markBlock(i, j)}\n                      state={state}\n                      opened={opened}\n                      marked={marked}\n                      minesCount={minesCount}\n                      key={j}\n                    />)\n                  })\n                }\n              </div>\n            )\n          }\n        </div>\n        <Difficulty\n          difficulty={difficulty}\n          setDifficulty={setDifficulty}\n        />\n      </div>\n    </div>\n  )\n};\n\nexport default observer(Board);\n","import React, { useState, useEffect } from 'react';\n\n// Hook\nexport default function useKeyPress(targetKey: string) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }: { key: string }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }: { key: string }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n","import React from 'react';\nimport AppStore from './app-store';\nimport { MobXProviderContext } from 'mobx-react';\n\nexport const stores = {\n  AppStore,\n};\n\nexport function useStores() {\n  return React.useContext(MobXProviderContext)\n}\n","import React from 'react';\nimport './App.css';\nimport Board from './components/board/board';\nimport {Provider} from 'mobx-react';\nimport AppStore from './stores/app-store';\nimport {create} from 'mobx-persist';\n\nconst App = () => {\n  const hydrate = create();\n  hydrate('app-store', AppStore).then(() => {\n    // Запускаем таймер после гидрации\n    if(AppStore.gameStarted) {\n      AppStore.startTimer();\n    }\n  });\n\n  document.onselectstart = function() {\n    return false;\n  };\n\n  return (\n    <Provider AppStore={AppStore}>\n      <div className='App'>\n       <Board />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}